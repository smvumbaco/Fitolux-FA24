import time
import Adafruit_CharLCD as LCD
import tkinter as tk
from datetime import datetime

# Raspberry Pi pin configuration:
lcd_rs        = 27  # Register select pin
lcd_en        = 22  # Enable pin
lcd_d4        = 25  # Data pins 1
lcd_d5        = 24  # Data pins 2
lcd_d6        = 23  # Data pins 3
lcd_d7        = 17  # Data pins 4
lcd_backlight = 4   # Backlight pin

# Define LCD column and row size for a 16x2 LCD.
lcd_columns = 16
lcd_rows    = 2

# Initialize the LCD using the pins above
lcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7, lcd_columns, lcd_rows, lcd_backlight)

class WeightSelectorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Weight Selector")
        self.weight = 0
        self.max_weight = 1000
        self.min_weight = 1

        # Create buttons and labels
        self.weight_label = tk.Label(root, text=f"Selected Weight: {self.weight} grams", font=("Helvetica", 24))
        self.weight_label.pack(pady=20)
        self.increase_button = tk.Button(root, text="Increase", command=self.increase_weight, font=("Helvetica", 18))
        self.increase_button.pack(pady=10)
        self.decrease_button = tk.Button(root, text="Decrease", command=self.decrease_weight, font=("Helvetica", 18))
        self.decrease_button.pack(pady=10)
        self.select_button = tk.Button(root, text="Select", command=self.select_weight, font=("Helvetica", 18))
        self.select_button.pack(pady=20)

        # Start updating the time on the LCD
        self.update_time()

    def increase_weight(self):
        if self.weight < self.max_weight:
            self.weight += 1
            self.update_display()

    def decrease_weight(self):
        if self.weight > self.min_weight:
            self.weight -= 1
            self.update_display()

    def select_weight(self):
        self.update_lcd(f"Final: {self.weight}g")

    def update_display(self):
        self.weight_label.config(text=f"Selected Weight: {self.weight} grams")
        self.update_lcd(f"Weight: {self.weight}g")

    def update_time(self):
        # Get the current time and format it
        current_time = datetime.now().strftime('%H:%M:%S')

        # Update the LCD display with both the weight and the time
        message = f"Weight: {self.weight}g\nTime: {current_time}"
        self.update_lcd(message)

        # Schedule the next time update after 1 second
        self.root.after(1000, self.update_time)

    def update_lcd(self, message):
        # Clear the LCD and display the updated message
        lcd.clear()
        lcd.message(message)
        time.sleep(0.1)

# Create the main application window
root = tk.Tk()
app = WeightSelectorApp(root)
root.mainloop()
